import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('data_SIRIUS.csv', skipinitialspace=True, sep=';')
df.columns = df.columns.str.lower().str.replace(' ', '_')
n = len(df)
df.loc[(df['жалобы'] == 'нет') | (df['жалобы'] == 'Жалоб нет.') | (df['жалобы'] == 'На момент осмотра жалоб нет')
       | (df['жалобы'] == 'не предъявляет') | (df['жалобы'] == 'Нет') |
       (df['жалобы'] == 'На момент осмотра жалоб не предъявляет.') | (df['жалобы'] == 'Жалоб нет') |
       (df['жалобы'] == 'Не предъявляет') | (df['жалобы'] == 'Не предъявляет') |
       (df['жалобы'] == 'Жалоб на момент осмотра не предъявляет') |
       (df['жалобы'] == 'Жалоб в момент осмотра не предъявляет.') |
       (df['жалобы'] == 'Жалоб в момент осмотра не предъявляет') |
       (df['жалобы'] == 'активно не предъявляет') | (df['жалобы'] == 'НЕТ') |
       (df['жалобы'] == 'Жалоб не предъявляет') | (df['жалобы'] == 'Жалоб на момент осмотра не предъявляет.')
       | (df['жалобы'] == 'Не предъявляет.') | (df['жалобы'] == 'Активно не предъявляет')
       | (df['жалобы'] == 'активно нет') | (df['жалобы'] == 'На момент осмотра не имеет') |
       (df['жалобы'] == 'жалоб нет') | (df['жалобы'] == 'на момент осмотра нет') |
       (df['жалобы'] == 'В настоящее время жалоб не предъявляет.') |
       (df['жалобы'] == 'На момент осмотра не предъявляет') |
       (df['жалобы'] == 'Активных жалоб на момент осмотра нет.') |
       (df['жалобы'] == 'На момент осмотра жалоб не предъявляет') | (df['жалобы'] == 'нет.') |
       (df['жалобы'] == 'активно не предъявляет.') | (df['жалобы'] == 'На момент осмотра не предьявляет') |
       (df['жалобы'] == 'активных жалоб нет') | (df['жалобы'] == 'Жалобы:  нет') |
       (df['жалобы'] == 'активных жалоб нет') | (df['жалобы'] == 'на момент осмотра не предъявляет') |
       (df['жалобы'] == 'на момент осмотра жалоб активно не предъявляет.') | (df['жалобы'] == 'Жалоб не имеет') |
       (df['жалобы'] == 'Жалоб нет. Кожные покровы чистые, педикулеза, '
                        'чесотки и других заразных заболеваний не выявлено. Согласно приказу медицинских '
                        'противопоказаний к работе в должности не имеет.') | (df['жалобы'] == 'На момент осмотра нет')
       | (df['жалобы'] == 'Не предьявляет') | (df['жалобы'] == '-') | (df['жалобы'] == 'не предъявляет.') |
       (df['жалобы'] == 'активных жалоб не предъявляет') | (df['жалобы'] ==
                                                            'Жалоб в момент осмотра не предъявляет. Головные боли, обмороки, ЧМТ отрицает.') |
       (df['жалобы'] == 'На момент осмотра жалоб нет.') | (df['жалобы'] == 'Активных жалоб не предъявляет') |
       (df['жалобы'] == 'Жалоб активно не предъявляет') | (df['жалобы'] == 'на момент осмотра жалоб не предъявляет')
       | (df['жалобы'] == 'На приеме с законным представителем (мамой). Активных жалоб нет.') |
       (df['жалобы'] == 'на момент осмотра активных жалоб по ЛОР не предъявляет') |
       (df['жалобы'] == 'на приеме с мамой проф осмотр для справк в спорт секцию') |
       (df['жалобы'] == 'Явка для проведения процедуры') |
       (df['жалобы'] == 'ХОЧЕТ УЛУЧШИТЬ ВНЕШНИЙ ВИД ЛИЦА,убрать межбровную складку.') |
       (df['жалобы'] == 'Активных на момент осмотра не предъявляет.') | (df['жалобы'] == 'Активно нет') |
       (df['жалобы'] == 'Проф. осмотр перед вакцинацией. Жалоб нет.') |
       (df['жалобы'] == 'Профосмотр во исполнение приказа № 229 от 2023г  '
                        '«Обязательный периодический медосмотр сотрудников КДЦБ на туберкулез  "'), 'жалобы'] = 'НЕТ'

df['возраст'] = df['возраст'].apply(lambda x: round(x / 365.2425))

df['возрастные_рамки1'] = df['возраст'].apply(lambda x: '0-10' if x <= 10 else x)
df['возрастные_рамки2'] = df['возрастные_рамки1'].apply(
    lambda x: '10-20' if type(x) == int and 10 < x <= 20 else x)
df['возрастные_рамки3'] = df['возрастные_рамки2'].apply(
    lambda x: '20-30' if type(x) == int and 20 < x <= 30 else x)
df['возрастные_рамки4'] = df['возрастные_рамки3'].apply(
    lambda x: '30-40' if type(x) == int and 30 < x <= 40 else x)
df['возрастные_рамки5'] = df['возрастные_рамки4'].apply(
    lambda x: '40-50' if type(x) == int and 40 < x <= 50 else x)
df['возрастные_рамки6'] = df['возрастные_рамки5'].apply(
    lambda x: '50-60' if type(x) == int and 50 < x <= 60 else x)
df['возрастные_рамки7'] = df['возрастные_рамки6'].apply(
    lambda x: '60-70' if type(x) == int and 60 < x <= 70 else x)
df['возрастные_рамки8'] = df['возрастные_рамки7'].apply(
    lambda x: '70-80' if type(x) == int and 70 < x <= 80 else x)
df['возрастные_рамки'] = df['возрастные_рамки8'].apply(lambda x: 'от 80' if type(x) == int and 80 < x else x)
df.drop(['возрастные_рамки8', 'возрастные_рамки7', 'возрастные_рамки6', 'возрастные_рамки5',
         'возрастные_рамки4', 'возрастные_рамки3', 'возрастные_рамки2', 'возрастные_рамки1'], axis=1, inplace=True)

df['пол'] = df['пол'].apply(lambda x: 'ЖЕН' if x == 1 else 'МУЖ')
nf = df[(df['жалобы'] == 'НЕТ')]
df = df[(df['жалобы'] != 'НЕТ')]
df.reset_index(drop=True, inplace=True)
df['наличие_жалоб'] = df['жалобы'].apply(lambda x: 'НЕТ' if x == 'НЕТ' else 'ДА')


# ---------------------------------------------------------------------------
# наличие жалоб от возраста
age_count = df['возрастные_рамки'].value_counts(ascending=True).to_dict()
plt.title('наличие жалоб от возраста')
plt.pie(df['возрастные_рамки'].value_counts(ascending=True), autopct='%1.1f%%')
plt.legend(age_count.keys(), loc='lower left', prop={'size': 6})
#plt.show()
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# наличие жалоб от пола
sex = df['пол'].value_counts(ascending=True).to_dict()
plt.title('наличие жалоб от пола')
plt.pie(df['пол'].value_counts(ascending=True), autopct='%1.1f%%')
plt.legend(sex.keys(), loc='lower left', prop={'size': 13})
#plt.show()
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Обращение пациентов к врачам в %
df['специальность_врача'] = df['специальность_врача'].replace('Медицинская сестра процедурной', 'Медицинская сестра')
df.loc[(df['специальность_врача'] == 'Заведующий отделением врач акушер гинеколог') |
       (df['специальность_врача'] == 'Заведующий кабинетом врач акушер гинеколог') | (
               df['специальность_врача'] == 'Руководитель центра врач акушер гинеколог'),
       'специальность_врача'] = 'Врач акушер гинеколог'
df.loc[(df['специальность_врача'] == 'Заведующий отделением врач хирург') | (
        df['специальность_врача'] == 'Врач детский хирург'), 'специальность_врача'] = 'Врач хирург'

df.loc[(df[
            'специальность_врача'] == 'Заведующий отделением врач дерматовенеролог'), 'специальность_врача'] = 'Врач дерматовенеролог'

df.loc[(df['специальность_врача'] == 'Заведующий отделением врач педиатр'), 'специальность_врача'] = 'Врач педиатр'

df.loc[
    (df['специальность_врача'] == 'Заведующий отделением врач офтальмолог'), 'специальность_врача'] = 'Врач офтальмолог'

df.loc[(df['специальность_врача'] == 'Заведующий кабинетом врач гастроэнтеролог') |
       (df[
            'специальность_врача'] == 'Зав. отделением врач гастроэнтеролог'), 'специальность_врача'] = 'Врач гастроэнтеролог'

df.loc[(df['специальность_врача'] == 'Заведующий отделением врач терапевт'), 'специальность_врача'] = 'Врач терапевт'

df.loc[(df['специальность_врача'] == 'Заведующий отделением врач уролог') |
       (df['специальность_врача'] == 'Врач детский уролог андролог') |
       (df['специальность_врача'] == 'Руководитель центра врач уролог'), 'специальность_врача'] = 'Врач уролог'

df.loc[(df['специальность_врача'] == 'Врач детский эндокринолог') | (
        df['специальность_врача'] == 'Заведующий отделением врач эндокринолог'),
       'специальность_врача'] = 'Врач эндокринолог'

df.loc[
    (df['специальность_врача'] == 'Врач стоматолог детский') | (df['специальность_врача'] == 'Врач стоматолог хирург')
    | (df['специальность_врача'] == 'Врач стоматолог терапевт'), 'специальность_врача'] = 'Врач стоматолог'

df.loc[(df['специальность_врача'] == 'Заведующий отделением врач травматолог ортопед') |
       (df['специальность_врача'] == 'Заведующий кабинетом врач травматолог ортопед'),
       'специальность_врача'] = 'Врач травматолог ортопед'

df.loc[(df['специальность_врача'] == 'Врач психиатр детский') |
       (df['специальность_врача'] == 'Врач психиатр нарколог'),
       'специальность_врача'] = 'Врач психиатр'

df.loc[(df['специальность_врача'] == 'Врач детский кардиолог') |
       (df['специальность_врача'] == 'Заведующий отделением врач кардиолог'),
       'специальность_врача'] = 'Врач кардиолог'

df.loc[(df['специальность_врача'] == 'Заведующий отделением врач невролог'),
       'специальность_врача'] = 'Врач невролог'

df.loc[(df['специальность_врача'] == 'Заведюущий отделением-врач-ревматолог'),
       'специальность_врача'] = 'Врач ревматолог'

df.loc[(df['специальность_врача'] == 'Врач сурдолог оториноларинголог'),
       'специальность_врача'] = 'Врач сурдолог'

df.loc[(df['специальность_врача'] == 'Заведующий кабинетом врач онколог') | (
        df['специальность_врача'] == 'Заведующий отделением врач онколог'),
       'специальность_врача'] = 'Врач онколог'

df.loc[
    (df['специальность_врача'] == 'Врач пластический хирург'), 'специальность_врача'] = 'Врач челюстно лицевой хирург'

doctor = df['специальность_врача'].value_counts(ascending=True).to_dict()
df['refactor_doctor'] = df['специальность_врача'].apply(lambda x: x if doctor[x] > 35 else 'Другие')

doctor_refactor = df['refactor_doctor'].value_counts(ascending=True).to_dict()
explode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
           0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)
plt.title('Обращение пациентов к врачам в %')
plt.pie(df['refactor_doctor'].value_counts(ascending=True), autopct='%1.1f%%', explode=explode)
plt.legend(doctor_refactor.keys(), bbox_to_anchor=(-0.35, 0.45, 0.25, 0.25), loc='upper left',
           borderaxespad=0, prop={'size': 6})
#plt.show()

# ---------------------------------------------------------------------------------------------
# обращение мужчин к врачам
new_df = df[(df['пол'] == 'МУЖ')]
man_doctor_refactor = new_df['refactor_doctor'].value_counts(ascending=True).to_dict()
explode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
           0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)
plt.title('Обращение мужчин к врачам в %')
plt.pie(new_df['refactor_doctor'].value_counts(ascending=True), autopct='%1.1f%%', explode=explode)
plt.legend(man_doctor_refactor.keys(), bbox_to_anchor=(-0.35, 0.45, 0.25, 0.25), loc='upper left',
           borderaxespad=0, prop={'size': 6})
#plt.show()
# -----------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------
# обращение женщин к врачам
new_df = df[(df['пол'] == 'ЖЕН')]
girl_doctor_refactor = new_df['refactor_doctor'].value_counts(ascending=True).to_dict()
explode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
           0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)
plt.title('Обращение женщин к врачам в %')
plt.pie(new_df['refactor_doctor'].value_counts(ascending=True), autopct='%1.1f%%', explode=explode)
plt.legend(girl_doctor_refactor.keys(), bbox_to_anchor=(-0.35, 0.45, 0.25, 0.25), loc='upper left',
           borderaxespad=0, prop={'size': 6})
#plt.show()
# -----------------------------------------------------------------------------------------------

# ----------------------------------------------------------------
# кол-во людей каждой возрастной категории в датасете, сходивших к врачам (у людей есть жалобы)
df = df.sort_values('возрастные_рамки')
sns.countplot(data=df, x='возрастные_рамки')
plt.title('Кол-во людей, сходивших к врачам')
plt.ylabel(' ')
#plt.show()
# -----------------------------------------------------------------

# -----------------------------------------------------------------
# нет жалоб от возраста
old = nf['возрастные_рамки'].value_counts(ascending=True).to_dict()
plt.title('нет жалоб от возраста')
plt.pie(nf['возрастные_рамки'].value_counts(ascending=True), autopct='%1.1f%%')
plt.legend(old.keys(), loc='lower left', prop={'size': 8})
#plt.show()
# -----------------------------------------------------------------

# -----------------------------------------------------------------
# нет жалоб от пола
sex = nf['пол'].value_counts(ascending=True).to_dict()
plt.title('нет жалоб от пола')
plt.pie(nf['пол'].value_counts(ascending=True), autopct='%1.1f%%')
plt.legend(sex.keys(), loc='lower left', prop={'size': 13})
#plt.show()
# -----------------------------------------------------------------


# РАБОТАЕМ С ЖАЛОБАМИ 2 ЭТАП
