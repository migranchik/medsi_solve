import pandas as pd
import difflib

df = pd.read_csv('data_SIRIUS.csv', skipinitialspace=True, sep=';')
df.columns = df.columns.str.lower().str.replace(' ', '_')
#  заменяем строки, в которых нет жалоб на нет и приводим все к нижнему регистру
df.loc[(df['жалобы'] == 'нет') | (df['жалобы'] == 'Жалоб нет.') | (df['жалобы'] == 'На момент осмотра жалоб нет')
       | (df['жалобы'] == 'не предъявляет') | (df['жалобы'] == 'Нет') |
       (df['жалобы'] == 'На момент осмотра жалоб не предъявляет.') | (df['жалобы'] == 'Жалоб нет') |
       (df['жалобы'] == 'Не предъявляет') | (df['жалобы'] == 'Не предъявляет') |
       (df['жалобы'] == 'Жалоб на момент осмотра не предъявляет') |
       (df['жалобы'] == 'Жалоб в момент осмотра не предъявляет.') |
       (df['жалобы'] == 'Жалоб в момент осмотра не предъявляет') |
       (df['жалобы'] == 'активно не предъявляет') | (df['жалобы'] == 'НЕТ') |
       (df['жалобы'] == 'Жалоб не предъявляет') | (df['жалобы'] == 'Жалоб на момент осмотра не предъявляет.')
       | (df['жалобы'] == 'Не предъявляет.') | (df['жалобы'] == 'Активно не предъявляет')
       | (df['жалобы'] == 'активно нет') | (df['жалобы'] == 'На момент осмотра не имеет') |
       (df['жалобы'] == 'жалоб нет') | (df['жалобы'] == 'на момент осмотра нет') |
       (df['жалобы'] == 'В настоящее время жалоб не предъявляет.') |
       (df['жалобы'] == 'На момент осмотра не предъявляет') |
       (df['жалобы'] == 'Активных жалоб на момент осмотра нет.') |
       (df['жалобы'] == 'На момент осмотра жалоб не предъявляет') | (df['жалобы'] == 'нет.') |
       (df['жалобы'] == 'активно не предъявляет.') | (df['жалобы'] == 'На момент осмотра не предьявляет') |
       (df['жалобы'] == 'активных жалоб нет') | (df['жалобы'] == 'Жалобы:  нет') |
       (df['жалобы'] == 'активных жалоб нет') | (df['жалобы'] == 'на момент осмотра не предъявляет') |
       (df['жалобы'] == 'на момент осмотра жалоб активно не предъявляет.') | (df['жалобы'] == 'Жалоб не имеет') |
       (df['жалобы'] == 'Жалоб нет. Кожные покровы чистые, педикулеза, '
                        'чесотки и других заразных заболеваний не выявлено. Согласно приказу медицинских '
                        'противопоказаний к работе в должности не имеет.') | (df['жалобы'] == 'На момент осмотра нет')
       | (df['жалобы'] == 'Не предьявляет') | (df['жалобы'] == '-') | (df['жалобы'] == 'не предъявляет.') |
       (df['жалобы'] == 'активных жалоб не предъявляет') | (df['жалобы'] ==
                                                            'Жалоб в момент осмотра не предъявляет. Головные боли, обмороки, ЧМТ отрицает.') |
       (df['жалобы'] == 'На момент осмотра жалоб нет.') | (df['жалобы'] == 'Активных жалоб не предъявляет') |
       (df['жалобы'] == 'Жалоб активно не предъявляет') | (df['жалобы'] == 'на момент осмотра жалоб не предъявляет')
       | (df['жалобы'] == 'На приеме с законным представителем (мамой). Активных жалоб нет.') |
       (df['жалобы'] == 'на момент осмотра активных жалоб по ЛОР не предъявляет') |
       (df['жалобы'] == 'на приеме с мамой проф осмотр для справк в спорт секцию') |
       (df['жалобы'] == 'Явка для проведения процедуры') |
       (df['жалобы'] == 'ХОЧЕТ УЛУЧШИТЬ ВНЕШНИЙ ВИД ЛИЦА,убрать межбровную складку.') |
       (df['жалобы'] == 'Активных на момент осмотра не предъявляет.') | (df['жалобы'] == 'Активно нет') |
       (df['жалобы'] == 'Проф. осмотр перед вакцинацией. Жалоб нет.') |
       (df['жалобы'] == 'Профосмотр во исполнение приказа № 229 от 2023г  '
                        '«Обязательный периодический медосмотр сотрудников КДЦБ на туберкулез  "'), 'жалобы'] = 'НЕТ'

df['жалобы'] = df['жалобы'].str.lower()
df.loc[(df['жалобы'] == 'на момент осмотра не предъявляет.') | (df['жалобы'] == 'активных нет.') |
       (df['жалобы'] == 'жалоб на момент осмотра нет') | (df['жалобы'] == 'активных жалоб нет.') |
       (df['жалобы'] == 'активных жалоб не предъявляет.') | (df['жалобы'] == 'на момент осмотра активно не предъявляет.')
       | (df['жалобы'] == 'на момент осмотра жалобы активно не предъявляет') | (df['жалобы'] == 'нет.') |
       (df['жалобы'] == 'явились с целью профилактического осмотра. жалоб нет.') |
       (df['жалобы'] == 'на момент осмотра жалоб нет'), 'жалобы'] = 'нет'

# Удаляем пробелы с начала строки и в её конце
df['жалобы'] = df['жалобы'].str.strip()

#  получение списка жалоб, отсортированного по частотности встречаемости в тексте
#print('получение списка жалоб, отсортированного по частотности встречаемости в тексте с "нет"')
#print(df['жалобы'].value_counts().to_frame())
#print('----------------------------------------------')
#print('А вот список жалоб, отсортированный по частотности встречаемости в тексте без "нет"')
#print(df[(df['жалобы'] != 'нет')]['жалобы'].value_counts().to_frame())

# Заполняем датасет синонимичными предложениями
def similarity(s1, s2):
    normalized1 = s1.lower()
    normalized2 = s2.lower()
    matcher = difflib.SequenceMatcher(None, normalized1, normalized2)
    return matcher.ratio()


for first in range(len(df['жалобы'].unique()) - 1):
    for second in range(first + 1, len(df['жалобы'].unique())):
        if df['жалобы'][first] != df['жалобы'][second] and similarity(df['жалобы'][first], df['жалобы'][second]) >= 0.55:
            df = df.replace(df['жалобы'][second], df['жалобы'][first])


# 10 самых часто встречаемых жалоб, без учета нет
print('10 самых часто встречаемых жалоб, без учета нет')
print(df[(df['жалобы'] != 'нет')]['жалобы'].value_counts().head(10))

# новый столбец: наличие или отсутствие жалоб
print('новый столбец: наличие или отсутствие жалоб')
df['новый'] = df['жалобы'].apply(lambda x: 1 if x != 'нет' else 0)
print(df['новый'])

